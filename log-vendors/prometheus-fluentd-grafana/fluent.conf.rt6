## Prometheus Input Plugin Configuration

# input plugin that exports metrics
<source>
  @type prometheus
</source>

<source>
@type monitor_agent
</source>

<source>
@type forward
</source>

# input plugin that collects metrics from MonitorAgent
<source>
@type prometheus_monitor
<labels>
  host ${hostname}
</labels>
</source>

# input plugin that collects metrics for output plugin
<source>
@type prometheus_output_monitor
<labels>
  host ${hostname}
</labels>
</source>

# input plugin that collects metrics for in_tail plugin
<source>
@type prometheus_tail_monitor
<labels>
  host ${hostname}
</labels>
</source>

<source>
  @type tail
  @id artifactory_service_tail
  path "#{ENV['ARTIFACTORY_HOME']}/logs/artifactory.log"
  pos_file "#{ENV['ARTIFACTORY_HOME']}/logs/artifactory.log.pos"
  tag jfrog.rt.artifactory.service
  <parse>
      @type multiline
      format_firstline /\d{4}-\d{1,2}-\d{1,2}/
      format1 /^(?<timestamp>[^.*]*) \[(?<service_type>[^\]]*)\] \[(?<log_level>[^\]]*)\] (?<class_line_number>.*) - (?<message>.+)$/
      time_key timestamp
      time_format %Y-%m-%d %H:%M:%S,%L
  </parse>
</source>

<source>
  @type tail
  @id artifactory_request_tail
  path "#{ENV['ARTIFACTORY_HOME']}/logs/request.log"
  pos_file "#{ENV['ARTIFACTORY_HOME']}/logs/request.log.pos"
  tag jfrog.rt.artifactory.request
  <parse>
    @type regexp
    expression ^(?<timestamp>[^ ]*)\|(?<trace_id>[^\|]*)\|(?<type>[^\|]*)\|(?<remote_address>[^\|]*)\|(?<username>[^\|]*)\|(?<request_method>[^\|]*)\|(?<request_url>[^\|]*)\|(?<request_user_agent>[^\|]*)\|(?<return_status>[^\|]*)\|(?<request_duration>.+)$
    time_key timestamp
    time_format %Y%m%d%H%M%S
  </parse>
</source>
<filter jfrog.rt.artifactory.request>
  @type record_transformer
  enable_ruby true
  <record>
    repo ${!record["request_url"].strip().start_with?("/api") ? (record["request_url"].strip().split('/')[1]) : ("")}
    artifact ${!record["request_url"].strip().start_with?("/api") ? (val = record["request_url"].strip().split('/'); val[val.length()-1]) : ("")}
    dockerRepo ${record["request_url"].strip().include?("/api/docker") && !record["request_url"].include?("/api/docker/null") && !record["request_url"].include?("/api/docker/v2") ? (record["request_url"].strip().split('/')[3]) : ("")}
    dockerImage ${record["request_url"].strip().include?("/api/docker") && !record["request_url"].include?("/api/docker/null") && !record["request_url"].include?("/api/docker/v2")  ? (record["request_url"].strip().split('/')[5]) : ("")}
  </record>
</filter>

<source>
  @type tail
  @id artifactory_access_tail
  path "#{ENV['ARTIFACTORY_HOME']}/logs/access.log"
  pos_file "#{ENV['ARTIFACTORY_HOME']}/logs/access.log.pos"
  tag jfrog.rt.artifactory.access
  <parse>
    @type regexp
    expression ^(?<timestamp>[^.*]*) \[(?<action_response>[^\]]*)\] (?<repo_path>.*) for client : (?<username>.+) / (?<ip>.+)$
    time_key timestamp
    time_format %Y-%m-%d %H:%M:%S,%L
  </parse>
</source>


<filter jfrog.**>
  @type record_transformer
  <record>
    hostname "#{Socket.gethostname}"
    log_source ${tag}
  </record>
</filter>

<source>
  @type exec
  tag jfrog.callhome
  command "#{ENV['ARTIFACTORY_HOME']}/fluentd-1.11.0-linux-x86_64/lib/ruby/bin/gem list --local | grep fluent | sed 's/ (/:/g' | sed 's/)//g'  | sed ':a;N;$!ba;s/\n/\t/g'"
  run_interval 1d
  <parse>
    @type ltsv
  </parse>
</source>
<source>
  @type exec
  tag jfrog.callhome
  command /opt/td-agent/embedded/bin/gem list --local | grep fluent | sed 's/ (/:/g' | sed 's/)//g'  | sed ':a;N;$!ba;s/\n/\t/g'
  run_interval 1d
  <parse>
    @type ltsv
  </parse>
</source>
<filter jfrog.callhome>
  @type record_transformer
  renew_record true
  keep_keys 'productId,features'
  enable_ruby true
  <record>
    productId 'jfrogLogAnalytics/v0.1.0'
    features ${return(record.map { |k,v| { "featureId" => (k + ':' + v).to_sym} })}
  </record>
</filter>
<match jfrog.callhome>
  @type http
  endpoint http://localhost:8081/artifactory/api/system/usage
  open_timeout 5
  content_type application/json
  <format>
    @type json
  </format>
  <buffer>
    flush_interval 5s
  </buffer>
</match>

<filter jfrog.rt.artifactory.request>
  @type prometheus

  <metric>
    name jfrog_rt_req
    type counter
    desc artifactory requests
    <labels>
      host ${hostname}
      request_url ${request_url}
      return_status ${return_status}
      repo ${repo}
      artifact ${artifact}
      dockerRepo ${dockerRepo}
      dockerImage ${dockerImage}
      remote_address ${remote_address}
    </labels>
  </metric>
</filter>

<filter jfrog.rt.artifactory.service>
@type prometheus
  <metric>
    name jfrog_rt_log_level
    type counter
    desc artifactory log_levels
    <labels>
      host ${hostname}
      log_level ${log_level}
    </labels>
  </metric>
</filter>

<filter jfrog.rt.artifactory.access>
@type prometheus

<metric>
  name jfrog_rt_access
  type counter
  desc artifactory access
  <labels>
    host ${hostname}
    username ${username}
    action_response ${action_response}
    ip ${ip}
  </labels>
</metric>

</filter>